##
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

# This file contains some of the configurations for the Kafka Connect distributed worker. This file is intended
# to be used with the examples, and some settings may differ from those used in a production system, especially
# the `bootstrap.servers` and those specifying replication factors.

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
bootstrap.servers=<%= scope['kafka_servers'] %>

# unique name for the cluster, used in forming the Connect cluster group. Note that this must not conflict with consumer group IDs
group.id=<%= scope['kafka_connect::group_id'] %>

# The converters specify the format of data in Kafka and how to translate it into Connect data. Every Connect user will
# need to configure these based on the format they want their data in when loaded from or stored into Kafka
key.converter=<%= scope['kafka_connect::key_converter'] %>
value.converter=<%= scope['kafka_connect::value_converter'] %>
# Converter-specific settings can be passed in by prefixing the Converter's setting with the converter we want to apply
# it to
key.converter.schemas.enable=<%= scope['kafka_connect::key_converter_schemas_enable'] %>
value.converter.schemas.enable=<%= scope['kafka_connect::value_converter_schemas_enable'] %>

<% if scope['kafka_connect::value_converter_schema_registry_url'] -%>
value.converter.schema.registry.url=<%= scope['kafka_connect::value_converter_schema_registry_url'] %>
<% end -%>

# Topic to use for storing offsets. This topic should have many partitions and be replicated and compacted.
# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.
# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able
# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.
offset.storage.topic=<%= scope['kafka_connect::offset_storage_topic'] %>
offset.storage.replication.factor=<%= scope['kafka_connect::offset_storage_replication_factor'] %>
offset.storage.partitions=<%= scope['kafka_connect::offset_storage_partitions'] %>

# Topic to use for storing connector and task configurations; note that this should be a single partition, highly replicated,
# and compacted topic. Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.
# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able
# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.
config.storage.topic=<%= scope['kafka_connect::config_storage_topic'] %>
config.storage.replication.factor=<%= scope['kafka_connect::config_storage_replication_factor'] %>

# Topic to use for storing statuses. This topic can have multiple partitions and should be replicated and compacted.
# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
# Most users will want to use the built-in default replication factor of 3 or in some cases even specify a larger value.
# Since this means there must be at least as many brokers as the maximum replication factor used, we'd like to be able
# to run this example on a single-broker cluster and so here we instead set the replication factor to 1.
status.storage.topic=<%= scope['kafka_connect::status_storage_topic'] %>
status.storage.replication.factor=<%= scope['kafka_connect::status_storage_replication_factor'] %>
status.storage.partitions=<%= scope['kafka_connect::status_storage_partitions'] %>

# Flush much faster than normal, which is useful for testing/debugging
offset.flush.interval.ms=<%= scope['kafka_connect::offset_flush_interval_ms'] %>

# List of comma-separated URIs the REST API will listen on. The supported protocols are HTTP and HTTPS.
# Specify hostname as 0.0.0.0 to bind to all interfaces.
# Leave hostname empty to bind to default interface.
# Examples of legal listener lists: HTTP://myhost:8083,HTTPS://myhost:8084"
listeners=<%= scope['kafka_connect::listeners'] %>

# The Hostname & Port that will be given out to other workers to connect to i.e. URLs that are routable from other servers.
# If not set, it uses the value for "listeners" if configured.
#rest.advertised.host.name=
#rest.advertised.port=
#rest.advertised.listener=

# Set to a list of filesystem paths separated by commas (,) to enable class loading isolation for plugins
# (connectors, converters, transformations). The list should consist of top level directories that include
# any combination of:
# a) directories immediately containing jars with plugins and their dependencies
# b) uber-jars with plugins and their dependencies
# c) directories immediately containing the package directory structure of classes of plugins and their dependencies
# Examples:
# plugin.path=/usr/local/share/java,/usr/local/share/kafka/plugins,/opt/connectors,
#plugin.path=/usr/share/java
plugin.path=<%= scope['kafka_connect::plugin_path'] %>

# Enable use of variables that refer by name to a FileConfigProvider in the form ${provider:[path:]key}
# See: https://docs.confluent.io/platform/current/connect/security.html#fileconfigprovider
config.providers=file
config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
